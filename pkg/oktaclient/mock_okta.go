// Code generated by MockGen. DO NOT EDIT.
// Source: okta.go

// Package oktaclient is a generated GoMock package.
package oktaclient

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	okta "github.com/okta/okta-sdk-golang/v2/okta"
	query "github.com/okta/okta-sdk-golang/v2/okta/query"
)

// MockOktaClient is a mock of OktaClient interface.
type MockOktaClient struct {
	ctrl     *gomock.Controller
	recorder *MockOktaClientMockRecorder
}

// MockOktaClientMockRecorder is the mock recorder for MockOktaClient.
type MockOktaClientMockRecorder struct {
	mock *MockOktaClient
}

// NewMockOktaClient creates a new mock instance.
func NewMockOktaClient(ctrl *gomock.Controller) *MockOktaClient {
	mock := &MockOktaClient{ctrl: ctrl}
	mock.recorder = &MockOktaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOktaClient) EXPECT() *MockOktaClientMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockOktaClient) CreateUser(ctx context.Context, body okta.CreateUserRequest, qp *query.Params) (*okta.User, *okta.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, body, qp)
	ret0, _ := ret[0].(*okta.User)
	ret1, _ := ret[1].(*okta.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockOktaClientMockRecorder) CreateUser(ctx, body, qp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockOktaClient)(nil).CreateUser), ctx, body, qp)
}

// DeactivateOrDeleteUser mocks base method.
func (m *MockOktaClient) DeactivateOrDeleteUser(ctx context.Context, userId string, qp *query.Params) (*okta.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateOrDeleteUser", ctx, userId, qp)
	ret0, _ := ret[0].(*okta.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateOrDeleteUser indicates an expected call of DeactivateOrDeleteUser.
func (mr *MockOktaClientMockRecorder) DeactivateOrDeleteUser(ctx, userId, qp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateOrDeleteUser", reflect.TypeOf((*MockOktaClient)(nil).DeactivateOrDeleteUser), ctx, userId, qp)
}

// DeactivateUser mocks base method.
func (m *MockOktaClient) DeactivateUser(ctx context.Context, userId string, qp *query.Params) (*okta.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateUser", ctx, userId, qp)
	ret0, _ := ret[0].(*okta.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateUser indicates an expected call of DeactivateUser.
func (mr *MockOktaClientMockRecorder) DeactivateUser(ctx, userId, qp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateUser", reflect.TypeOf((*MockOktaClient)(nil).DeactivateUser), ctx, userId, qp)
}

// GetUser mocks base method.
func (m *MockOktaClient) GetUser(ctx context.Context, userId string) (*okta.User, *okta.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userId)
	ret0, _ := ret[0].(*okta.User)
	ret1, _ := ret[1].(*okta.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUser indicates an expected call of GetUser.
func (mr *MockOktaClientMockRecorder) GetUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockOktaClient)(nil).GetUser), ctx, userId)
}

// ListUsers mocks base method.
func (m *MockOktaClient) ListUsers(ctx context.Context, qp *query.Params) ([]*okta.User, *okta.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, qp)
	ret0, _ := ret[0].([]*okta.User)
	ret1, _ := ret[1].(*okta.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockOktaClientMockRecorder) ListUsers(ctx, qp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockOktaClient)(nil).ListUsers), ctx, qp)
}

// UpdateUser mocks base method.
func (m *MockOktaClient) UpdateUser(ctx context.Context, userId string, body okta.User, qp *query.Params) (*okta.User, *okta.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, userId, body, qp)
	ret0, _ := ret[0].(*okta.User)
	ret1, _ := ret[1].(*okta.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockOktaClientMockRecorder) UpdateUser(ctx, userId, body, qp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockOktaClient)(nil).UpdateUser), ctx, userId, body, qp)
}
